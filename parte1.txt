module Documento
  ( Doc,
    vacio,
    linea,
    texto,
    foldDoc,
    (<+>),
    indentar,
    mostrar,
    imprimir,
  )
where

data Doc
  = Vacio
  | Texto String Doc
  | Linea Int Doc
  deriving (Eq, Show)

vacio :: Doc
vacio = Vacio

linea :: Doc
linea = Linea 0 Vacio

texto :: String -> Doc
texto t | '\n' `elem` t = error "El texto no debe contener saltos de línea"
texto [] = Vacio
texto t = Texto t Vacio

foldDoc :: (String -> b -> b) -> (Int -> b -> b) -> b -> Doc -> b
foldDoc fTexto fLinea acc doc = case doc of
  Vacio      -> acc
  Texto s d  -> fTexto s (foldDoc fTexto fLinea acc d)
  Linea i d' -> fLinea i (foldDoc fTexto fLinea acc d')
   
-- NOTA: Se declara `infixr 6 <+>` para que `d1 <+> d2 <+> d3` sea equivalente a `d1 <+> (d2 <+> d3)`
-- También permite que expresiones como `texto "a" <+> linea <+> texto "c"` sean válidas sin la necesidad de usar paréntesis.
infixr 6 <+>

(<+>) :: Doc -> Doc -> Doc
d1 <+> d2 = foldDoc fTexto fLinea d2 d1
  where
    fTexto s acc = case acc of
      Texto s' d -> Texto (s ++ s') d 
      _          -> Texto s acc

    fLinea i acc = Linea i acc

-- Texto "abcd" Vacio == Texto "ab" (Texto "cd" Vacio) , PERO uno respeta el invariante y el otro no.
-- Entonces en (<+>) cuando foldDoc entra por fTexto , si el acumulador es un Texto s d , creo un nuevo
-- Texto concatenando el string que entro por el fold con el string del acumulador.
-- Si entra con cualquier otra cosa simplemente devuelvo Texto s acumulador, De esa manera
-- respetaria el invariante.

indentar :: Int -> Doc -> Doc
indentar i  = foldDoc fTexto fLinea vacio
  where
    fTexto s acc  = Texto s acc
    fLinea i' acc = if (>=) (i+i') 0 then Linea (i+i') acc else Linea 0 acc

-- Si el i que quiero indentar es negativo puede romper el invariante de Linea que dice que i debe ser
-- mayor o igual que 0 , entonces con un if me fijo que i siempre quede positivo , en caso contrario
-- asumo que el usuario quiso "des-indentar" de mas y lo acoto en 0.

mostrar :: Doc -> String
mostrar = foldDoc fTexto fLinea ""
  where
    fTexto s acc = s ++ acc
    fLinea i acc = "\n" ++ replicate i ' ' ++ acc

-- | Función dada que imprime un documento en pantalla

-- ghci> imprimir (Texto "abc" (Linea 2 (Texto "def" Vacio)))
-- abc
--   def

imprimir :: Doc -> IO ()
imprimir d = putStrLn (mostrar d)
